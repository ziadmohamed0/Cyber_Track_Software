/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  */

#include "../../Drivers/custom_driver/hal/hal_defs.h"

// Array mapping timers
timer* timer_objects[4] = {nullptr, nullptr, nullptr, nullptr};

// Callback function for blinking LED
void led_toggle_callback() {
    GPIOA->ODR ^= (1 << 5); // Toggle PA5 (on-board LED for Nucleo usually)
}

int main() {
    // Enable GPIOA clock
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;

    // Configure PA5 as output push-pull
    GPIOA->CRL &= ~(0xF << (5 * 4));
    GPIOA->CRL |=  (0x1 << (5 * 4)); // 0b0001 = Output mode, max speed 10MHz

    // Create TIM2 instance: tick every 1ms, overflow every 1000ms = 1s
    timer tim2(TIM2, 72 - 1, 1000 - 1, led_toggle_callback);
    timer_objects[1] = &tim2; // Index 1 = TIM2

    // Enable TIM2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);

    // Start timer
    tim2.start();

    while (1) {
        // do nothing, ISR handles LED toggle
    }
}

// IRQ handler
extern "C" void TIM2_IRQHandler(void) {
    if (timer_objects[1]) {
        timer_objects[1]->handler();
    }
}
