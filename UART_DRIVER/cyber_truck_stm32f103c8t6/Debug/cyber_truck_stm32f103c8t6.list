
cyber_truck_stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000604  08000604  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000604  08000604  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000604  08000604  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000604  08000604  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000604  08000604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800060c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000004  08000610  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08000610  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ac7  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d97  00000000  00000000  00022af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e8  00000000  00000000  00023890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000260  00000000  00000000  00023b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c8c  00000000  00000000  00023dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ba3  00000000  00000000  0003aa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fdd9  00000000  00000000  0003f607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bf3e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008d8  00000000  00000000  000bf430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080005ec 	.word	0x080005ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080005ec 	.word	0x080005ec

0800014c <main>:
  ******************************************************************************
  */

#include "../../Drivers/custom_driver/hal/hal_defs.h"

int main (int argc, char* argv[]) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
    SystemInit();
 8000156:	f000 f828 	bl	80001aa <SystemInit>

    while (true) {
 800015a:	e7fe      	b.n	800015a <main+0xe>

0800015c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000160:	e7fe      	b.n	8000160 <NMI_Handler+0x4>

08000162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000162:	b480      	push	{r7}
 8000164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000166:	e7fe      	b.n	8000166 <HardFault_Handler+0x4>

08000168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000168:	b480      	push	{r7}
 800016a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800016c:	e7fe      	b.n	800016c <MemManage_Handler+0x4>

0800016e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800016e:	b480      	push	{r7}
 8000170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000172:	e7fe      	b.n	8000172 <BusFault_Handler+0x4>

08000174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000178:	e7fe      	b.n	8000178 <UsageFault_Handler+0x4>

0800017a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800017a:	b480      	push	{r7}
 800017c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800017e:	bf00      	nop
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr

08000186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000186:	b480      	push	{r7}
 8000188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800018a:	bf00      	nop
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr

08000192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000192:	b480      	push	{r7}
 8000194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000196:	bf00      	nop
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr

0800019e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800019e:	b580      	push	{r7, lr}
 80001a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001a2:	f000 f82f 	bl	8000204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}

080001aa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001aa:	b480      	push	{r7}
 80001ac:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001ae:	bf00      	nop
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
	...

080001b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80001b8:	f7ff fff7 	bl	80001aa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80001be:	490c      	ldr	r1, [pc, #48]	; (80001f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80001c0:	4a0c      	ldr	r2, [pc, #48]	; (80001f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80001c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001c4:	e002      	b.n	80001cc <LoopCopyDataInit>

080001c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ca:	3304      	adds	r3, #4

080001cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001d0:	d3f9      	bcc.n	80001c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001d2:	4a09      	ldr	r2, [pc, #36]	; (80001f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80001d4:	4c09      	ldr	r4, [pc, #36]	; (80001fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80001d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001d8:	e001      	b.n	80001de <LoopFillZerobss>

080001da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001dc:	3204      	adds	r2, #4

080001de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001e0:	d3fb      	bcc.n	80001da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80001e2:	f000 f9df 	bl	80005a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001e6:	f7ff ffb1 	bl	800014c <main>
  bx lr
 80001ea:	4770      	bx	lr
  ldr r0, =_sdata
 80001ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80001f4:	0800060c 	.word	0x0800060c
  ldr r2, =_sbss
 80001f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80001fc:	20000280 	.word	0x20000280

08000200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000200:	e7fe      	b.n	8000200 <ADC1_2_IRQHandler>
	...

08000204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <HAL_IncTick+0x1c>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	461a      	mov	r2, r3
 800020e:	4b05      	ldr	r3, [pc, #20]	; (8000224 <HAL_IncTick+0x20>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4413      	add	r3, r2
 8000214:	4a03      	ldr	r2, [pc, #12]	; (8000224 <HAL_IncTick+0x20>)
 8000216:	6013      	str	r3, [r2, #0]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	20000000 	.word	0x20000000
 8000224:	20000020 	.word	0x20000020

08000228 <_ZN18external_interrupt7handlerEv>:
}

void external_interrupt::enable()  { bit_math::set_bit(EXTI->IMR, line); }
void external_interrupt::disable() { bit_math::clear_bit(EXTI->IMR, line); }

void external_interrupt::handler() {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
    if (bit_math::get_bit(EXTI->PR, line)) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	4619      	mov	r1, r3
 8000236:	480d      	ldr	r0, [pc, #52]	; (800026c <_ZN18external_interrupt7handlerEv+0x44>)
 8000238:	f000 f82d 	bl	8000296 <_ZN8bit_math7get_bitImEEbRVT_m>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d00f      	beq.n	8000262 <_ZN18external_interrupt7handlerEv+0x3a>
        bit_math::set_bit(EXTI->PR, line); // clear pending
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	4619      	mov	r1, r3
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <_ZN18external_interrupt7handlerEv+0x44>)
 800024a:	f000 f811 	bl	8000270 <_ZN8bit_math7set_bitImEEvRVT_m>
        if (callback) {
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d005      	beq.n	8000262 <_ZN18external_interrupt7handlerEv+0x3a>
            callback(pin);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	7852      	ldrb	r2, [r2, #1]
 800025e:	4610      	mov	r0, r2
 8000260:	4798      	blx	r3
        }
    }
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40010414 	.word	0x40010414

08000270 <_ZN8bit_math7set_bitImEEvRVT_m>:
	inline void clear_bit(volatile T &reg, uint32_t bit) {
		reg &= ~(static_cast<T>(1) << bit);
	}

	template<typename T>
	inline void set_bit(volatile T &reg, uint32_t bit) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
		reg |= (static_cast<T>(1) << bit);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	2101      	movs	r1, #1
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	fa01 f303 	lsl.w	r3, r1, r3
 8000286:	431a      	orrs	r2, r3
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	601a      	str	r2, [r3, #0]
	}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr

08000296 <_ZN8bit_math7get_bitImEEbRVT_m>:
	inline void toggle_bit(volatile T &reg, uint32_t bit) {
		reg ^= (static_cast<T>(1) << bit);
	}

	template<typename T>
	inline bool get_bit(volatile T &reg, uint32_t bit) {
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	6039      	str	r1, [r7, #0]
		return (reg >> bit) & static_cast<T>(1);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	fa22 f303 	lsr.w	r3, r2, r3
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	bf14      	ite	ne
 80002b2:	2301      	movne	r3, #1
 80002b4:	2300      	moveq	r3, #0
 80002b6:	b2db      	uxtb	r3, r3
	}
 80002b8:	4618      	mov	r0, r3
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
	...

080002c4 <EXTI0_IRQHandler>:

#include "mcal_dfs.h"

/* external interrupt */
external_interrupt* exti_objects[16] = {nullptr};
extern "C" void EXTI0_IRQHandler(void)      { if (exti_objects[0]) exti_objects[0]->handler(); }
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <EXTI0_IRQHandler+0x1c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d004      	beq.n	80002da <EXTI0_IRQHandler+0x16>
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <EXTI0_IRQHandler+0x1c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ffa7 	bl	8000228 <_ZN18external_interrupt7handlerEv>
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000024 	.word	0x20000024

080002e4 <EXTI1_IRQHandler>:
extern "C" void EXTI1_IRQHandler(void)      { if (exti_objects[1]) exti_objects[1]->handler(); }
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI1_IRQHandler+0x1c>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d004      	beq.n	80002fa <EXTI1_IRQHandler+0x16>
 80002f0:	4b03      	ldr	r3, [pc, #12]	; (8000300 <EXTI1_IRQHandler+0x1c>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff97 	bl	8000228 <_ZN18external_interrupt7handlerEv>
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000024 	.word	0x20000024

08000304 <EXTI2_IRQHandler>:
extern "C" void EXTI2_IRQHandler(void)      { if (exti_objects[2]) exti_objects[2]->handler(); }
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <EXTI2_IRQHandler+0x1c>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d004      	beq.n	800031a <EXTI2_IRQHandler+0x16>
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI2_IRQHandler+0x1c>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff87 	bl	8000228 <_ZN18external_interrupt7handlerEv>
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000024 	.word	0x20000024

08000324 <EXTI3_IRQHandler>:
extern "C" void EXTI3_IRQHandler(void)      { if (exti_objects[3]) exti_objects[3]->handler(); }
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI3_IRQHandler+0x1c>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d004      	beq.n	800033a <EXTI3_IRQHandler+0x16>
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <EXTI3_IRQHandler+0x1c>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff77 	bl	8000228 <_ZN18external_interrupt7handlerEv>
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000024 	.word	0x20000024

08000344 <EXTI4_IRQHandler>:
extern "C" void EXTI4_IRQHandler(void)      { if (exti_objects[4]) exti_objects[4]->handler(); }
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <EXTI4_IRQHandler+0x1c>)
 800034a:	691b      	ldr	r3, [r3, #16]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d004      	beq.n	800035a <EXTI4_IRQHandler+0x16>
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <EXTI4_IRQHandler+0x1c>)
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff67 	bl	8000228 <_ZN18external_interrupt7handlerEv>
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000024 	.word	0x20000024

08000364 <EXTI9_5_IRQHandler>:
extern "C" void EXTI9_5_IRQHandler(void)    { for (int i=5;  i<=9;  ++i)  if (exti_objects[i]) exti_objects[i]->handler(); }
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	2305      	movs	r3, #5
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b09      	cmp	r3, #9
 8000372:	dc10      	bgt.n	8000396 <EXTI9_5_IRQHandler+0x32>
 8000374:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <EXTI9_5_IRQHandler+0x3c>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d006      	beq.n	800038e <EXTI9_5_IRQHandler+0x2a>
 8000380:	4a07      	ldr	r2, [pc, #28]	; (80003a0 <EXTI9_5_IRQHandler+0x3c>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff4d 	bl	8000228 <_ZN18external_interrupt7handlerEv>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3301      	adds	r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	e7eb      	b.n	800036e <EXTI9_5_IRQHandler+0xa>
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000024 	.word	0x20000024

080003a4 <EXTI15_10_IRQHandler>:
extern "C" void EXTI15_10_IRQHandler(void)  { for (int i=10; i<=15; ++i) if (exti_objects[i]) exti_objects[i]->handler(); }
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	230a      	movs	r3, #10
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2b0f      	cmp	r3, #15
 80003b2:	dc10      	bgt.n	80003d6 <EXTI15_10_IRQHandler+0x32>
 80003b4:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <EXTI15_10_IRQHandler+0x3c>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d006      	beq.n	80003ce <EXTI15_10_IRQHandler+0x2a>
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <EXTI15_10_IRQHandler+0x3c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff2d 	bl	8000228 <_ZN18external_interrupt7handlerEv>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	e7eb      	b.n	80003ae <EXTI15_10_IRQHandler+0xa>
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000024 	.word	0x20000024

080003e4 <TIM1_UP_IRQHandler>:

// Fixed mapping: TIM2 -> [0], TIM3 -> [1], TIM4 -> [2], TIM1 -> [3] لو عايز
timer* timer_objects[4] = {nullptr};

extern "C" void TIM1_UP_IRQHandler(void) { if (timer_objects[3]) timer_objects[3]->handler(); }
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <TIM1_UP_IRQHandler+0x1c>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d004      	beq.n	80003fa <TIM1_UP_IRQHandler+0x16>
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <TIM1_UP_IRQHandler+0x1c>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f835 	bl	8000464 <_ZN5timer7handlerEv>
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000064 	.word	0x20000064

08000404 <TIM2_IRQHandler>:
extern "C" void TIM2_IRQHandler(void)    { if (timer_objects[0]) timer_objects[0]->handler(); }
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <TIM2_IRQHandler+0x1c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d004      	beq.n	800041a <TIM2_IRQHandler+0x16>
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <TIM2_IRQHandler+0x1c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f000 f825 	bl	8000464 <_ZN5timer7handlerEv>
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000064 	.word	0x20000064

08000424 <TIM3_IRQHandler>:
extern "C" void TIM3_IRQHandler(void)    { if (timer_objects[1]) timer_objects[1]->handler(); }
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <TIM3_IRQHandler+0x1c>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d004      	beq.n	800043a <TIM3_IRQHandler+0x16>
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <TIM3_IRQHandler+0x1c>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f815 	bl	8000464 <_ZN5timer7handlerEv>
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000064 	.word	0x20000064

08000444 <TIM4_IRQHandler>:
extern "C" void TIM4_IRQHandler(void)    { if (timer_objects[2]) timer_objects[2]->handler(); }
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <TIM4_IRQHandler+0x1c>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d004      	beq.n	800045a <TIM4_IRQHandler+0x16>
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <TIM4_IRQHandler+0x1c>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f805 	bl	8000464 <_ZN5timer7handlerEv>
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000064 	.word	0x20000064

08000464 <_ZN5timer7handlerEv>:

void timer::stop() {
    instance->CR1 &= ~TIM_CR1_CEN;
}

void timer::handler() {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
    if (instance->SR & TIM_SR_UIF) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	2b00      	cmp	r3, #0
 8000478:	bf14      	ite	ne
 800047a:	2301      	movne	r3, #1
 800047c:	2300      	moveq	r3, #0
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d00e      	beq.n	80004a2 <_ZN5timer7handlerEv+0x3e>
        instance->SR &= ~TIM_SR_UIF; // clear flag
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	691a      	ldr	r2, [r3, #16]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	f022 0201 	bic.w	r2, r2, #1
 8000492:	611a      	str	r2, [r3, #16]
        if (callback) callback();
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <_ZN5timer7handlerEv+0x3e>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4798      	blx	r3
    }
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <USART1_IRQHandler>:
volatile uint16_t rxHead = 0, rxTail = 0;
volatile uint16_t txHead = 0, txTail = 0;
volatile bool txBusy = false;

extern "C" void USART1_IRQHandler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
	if(USART1->SR & (1<<5))
 80004b2:	4b34      	ldr	r3, [pc, #208]	; (8000584 <USART1_IRQHandler+0xd8>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f003 0320 	and.w	r3, r3, #32
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	bf14      	ite	ne
 80004be:	2301      	movne	r3, #1
 80004c0:	2300      	moveq	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d021      	beq.n	800050c <USART1_IRQHandler+0x60>
	{
		char receivedData = USART1->DR & 0xFF;
 80004c8:	4b2e      	ldr	r3, [pc, #184]	; (8000584 <USART1_IRQHandler+0xd8>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	71fb      	strb	r3, [r7, #7]

		uint16_t nextHead = (rxHead + 1) % RX_BUFFER_SIZE;
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <USART1_IRQHandler+0xdc>)
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	3301      	adds	r3, #1
 80004d6:	425a      	negs	r2, r3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	bf58      	it	pl
 80004de:	4253      	negpl	r3, r2
 80004e0:	80bb      	strh	r3, [r7, #4]

		if(nextHead != rxTail)
 80004e2:	4b2a      	ldr	r3, [pc, #168]	; (800058c <USART1_IRQHandler+0xe0>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	88ba      	ldrh	r2, [r7, #4]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	bf14      	ite	ne
 80004ee:	2301      	movne	r3, #1
 80004f0:	2300      	moveq	r3, #0
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d009      	beq.n	800050c <USART1_IRQHandler+0x60>
		{
			rxBuffer[rxHead] = receivedData;
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <USART1_IRQHandler+0xdc>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	4a23      	ldr	r2, [pc, #140]	; (8000590 <USART1_IRQHandler+0xe4>)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	5453      	strb	r3, [r2, r1]
			rxHead = nextHead;
 8000506:	4a20      	ldr	r2, [pc, #128]	; (8000588 <USART1_IRQHandler+0xdc>)
 8000508:	88bb      	ldrh	r3, [r7, #4]
 800050a:	8013      	strh	r3, [r2, #0]
		}
	}

	if(USART1->SR & (1<<7))
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <USART1_IRQHandler+0xd8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000514:	2b00      	cmp	r3, #0
 8000516:	bf14      	ite	ne
 8000518:	2301      	movne	r3, #1
 800051a:	2300      	moveq	r3, #0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b00      	cmp	r3, #0
 8000520:	d02b      	beq.n	800057a <USART1_IRQHandler+0xce>
	{
		if(txHead != txTail)
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <USART1_IRQHandler+0xe8>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <USART1_IRQHandler+0xec>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	b29b      	uxth	r3, r3
 800052e:	429a      	cmp	r2, r3
 8000530:	bf14      	ite	ne
 8000532:	2301      	movne	r3, #1
 8000534:	2300      	moveq	r3, #0
 8000536:	b2db      	uxtb	r3, r3
 8000538:	2b00      	cmp	r3, #0
 800053a:	d015      	beq.n	8000568 <USART1_IRQHandler+0xbc>
		{
			USART1->DR = txBuffer[txTail];
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <USART1_IRQHandler+0xec>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	b29b      	uxth	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <USART1_IRQHandler+0xf0>)
 8000546:	5c9b      	ldrb	r3, [r3, r2]
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <USART1_IRQHandler+0xd8>)
 800054c:	605a      	str	r2, [r3, #4]
			txTail = (txTail + 1) % TX_BUFFER_SIZE;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <USART1_IRQHandler+0xec>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b29b      	uxth	r3, r3
 8000554:	3301      	adds	r3, #1
 8000556:	425a      	negs	r2, r3
 8000558:	b2db      	uxtb	r3, r3
 800055a:	b2d2      	uxtb	r2, r2
 800055c:	bf58      	it	pl
 800055e:	4253      	negpl	r3, r2
 8000560:	b29a      	uxth	r2, r3
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <USART1_IRQHandler+0xec>)
 8000564:	801a      	strh	r2, [r3, #0]
		{
			USART1->CR1 &= ~(1<<7);
			txBusy = false;
		}
	}
}
 8000566:	e008      	b.n	800057a <USART1_IRQHandler+0xce>
			USART1->CR1 &= ~(1<<7);
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <USART1_IRQHandler+0xd8>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	4a05      	ldr	r2, [pc, #20]	; (8000584 <USART1_IRQHandler+0xd8>)
 800056e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000572:	60d3      	str	r3, [r2, #12]
			txBusy = false;
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <USART1_IRQHandler+0xf4>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40013800 	.word	0x40013800
 8000588:	20000274 	.word	0x20000274
 800058c:	20000276 	.word	0x20000276
 8000590:	20000074 	.word	0x20000074
 8000594:	20000278 	.word	0x20000278
 8000598:	2000027a 	.word	0x2000027a
 800059c:	20000174 	.word	0x20000174
 80005a0:	2000027c 	.word	0x2000027c

080005a4 <__libc_init_array>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	2600      	movs	r6, #0
 80005a8:	4d0c      	ldr	r5, [pc, #48]	; (80005dc <__libc_init_array+0x38>)
 80005aa:	4c0d      	ldr	r4, [pc, #52]	; (80005e0 <__libc_init_array+0x3c>)
 80005ac:	1b64      	subs	r4, r4, r5
 80005ae:	10a4      	asrs	r4, r4, #2
 80005b0:	42a6      	cmp	r6, r4
 80005b2:	d109      	bne.n	80005c8 <__libc_init_array+0x24>
 80005b4:	f000 f81a 	bl	80005ec <_init>
 80005b8:	2600      	movs	r6, #0
 80005ba:	4d0a      	ldr	r5, [pc, #40]	; (80005e4 <__libc_init_array+0x40>)
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <__libc_init_array+0x44>)
 80005be:	1b64      	subs	r4, r4, r5
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	42a6      	cmp	r6, r4
 80005c4:	d105      	bne.n	80005d2 <__libc_init_array+0x2e>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005cc:	4798      	blx	r3
 80005ce:	3601      	adds	r6, #1
 80005d0:	e7ee      	b.n	80005b0 <__libc_init_array+0xc>
 80005d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d6:	4798      	blx	r3
 80005d8:	3601      	adds	r6, #1
 80005da:	e7f2      	b.n	80005c2 <__libc_init_array+0x1e>
 80005dc:	08000604 	.word	0x08000604
 80005e0:	08000604 	.word	0x08000604
 80005e4:	08000604 	.word	0x08000604
 80005e8:	08000608 	.word	0x08000608

080005ec <_init>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr

080005f8 <_fini>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	bf00      	nop
 80005fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	469e      	mov	lr, r3
 8000602:	4770      	bx	lr
